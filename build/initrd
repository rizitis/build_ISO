#!/bin/sh
# shellcheck disable=SC1090
[ "$#" -ne 1 ] && distribution=slint
[ ! "$distribution" ] && distribution="$1"
if [ ! "$distribution" = salix ] && [ ! "$distribution" = slackware ] && [ ! "$distribution" = slint ]; then
	echo "$distribution is not a supported distribution"
	exit
fi
. ./build/set_variables_"$distribution"
if [ ! "$(id -u)" -eq 0 ]; then
  echo "Please execute this script as root."
  exit
fi
# Get the initrd from Slackware64-15.0 from a remote Slackware mirror, then unpack it.
wget -q https://slackware.uk/slackware/slackware64-15.0/EFI/BOOT/initrd.img -O "$ROOTDIR"/initrd.img
USER=$(stat -c %U .)
rm -rf  "$ROOTDIR"/initrd-tree
mkdir "$ROOTDIR"/initrd-tree
(cd "$ROOTDIR"/initrd-tree
xz -dc "$ROOTDIR"/initrd.img | cpio -di
# We remove the modules, that we will replaces by ones matching our kernel.
rm -rf lib/modules/*
)
chown -R "$USER": "$ROOTDIR"/initrd-tree
# Customize the initrd
# Install in the installer packages also needed early during installation
# (before setting swapinzram to allow installing more with limited RAM)
# As we have a local repository ready, get them from there:
#

spkg -i -qq --root "$DEST" "$ISODIR"/slint/alsa-utils*t?z
spkg -i -qq --root "$DEST" "$ISODIR"/slint/spkg*t?z
spkg -i -qq --root "$DEST" "$ISODIR"/slint/swapinzram*t?z
spkg -i -qq --root "$DEST" "$ISODIR"/slint/xz*t?z
spkg -i -qq --root "$DEST" "$ISODIR"/slint/ipw2100-fw*txz
spkg -i -qq --root "$DEST" "$ISODIR"/slint/ipw2200-fw*txz
spkg -i -qq --root "$DEST" "$ISODIR"/slint/zd1211-firmware*txz
spkg -i -qq --root "$DEST" "$ISODIR"/slint/b43-firmware*txz
spkg -i -qq --root "$DEST" "$ISODIR"/slint/b43-fwcutter*txz
spkg -i -qq --root "$DEST" "$ISODIR"/slint/gettext-0*t?z
# We do not care for the messages and warnings insralling brltty-installer like:
# brltty-genkey: key generated
# chgrp: cannot access 'etc/brlapi.key': No such file or directory
# chmod: cannot access 'etc/brlapi.key': No such file or directory
# brltty-mkuser: unprivileged user not configured - use -U (user) to specify
spkg -i -qq --root "$DEST" "$ISODIR"/slint/brltty-installer*t?z 1>/dev/null 2>/dev/null
spkg -i -qq --root "$DEST" "$ISODIR"/slint/slint-doc-installer*t?z
spkg -i -qq --root "$DEST" "$ISODIR"/slint/espeakup-installer*t?z
spkg -i -qq --root "$DEST" "$ISODIR"/slint/espeak-ng-installer*t?z
spkg -i -qq --root "$DEST" "$ISODIR"/slint/firmware-installer*t?z
spkg -i -qq --root "$DEST" "$ISODIR"/slint/modules-installer*t?z
spkg -i -qq --root "$DEST" "$ISODIR"/slint/links-installer*t?z
spkg -i -qq --root "$DEST" "$ISODIR"/slint/w3m-installer*t?z
spkg -i -qq --root "$DEST" "$ISODIR"/slint/installer-translations-${distribution}*t?z
# remove files we won't need during installation
rm -rf "$DEST"/usr/lib64/python*
rm -rf "$DEST"/usr/doc/*
rm -rf "$DEST"/usr/man/*
rm -f "$DEST"/usr/bin/dbus-launch
# Include some files available in "$ROOTDIR/misc/files_in_the_initrd.list"
while read -r i; do
	[ ! "$i" ] && continue
	echo "$i included in the installer " >> LOG_build_ISO
	mkdir -p "$DEST"/"$(dirname "$i")"
	cp -r "$SCRIPTS"/"$(basename "$i")" "$DEST"/"$(dirname "$i")"
	chmod 0755 "$DEST"/"$(dirname "$i")"/"$(basename "$i")"
done < "$ROOTDIR"/misc/files_in_the_initrd.list
# Writes files allowing to identify the ISO and the distribution
echo "$ISOVERSION" > "$DEST"/tmp/isoversion
echo "$ISOLABEL" > "$DEST"/tmp/isolabel
echo "$DISTRIBUTION" > "$DEST"/tmp/distro
# Include all packages sets
cp -r "$ROOTDIR"/sets "$DEST"
cp "$ROOTDIR"/misc/start"$distribution" "$DEST"/sbin/start || exit

chmod 755 "$DEST"/sbin/start
echo '#Empty file' > "$DEST"/etc/asound.conf
# Copy the font we need in the installer
mkdir -p "$DEST"/usr/share/fonts
cp "$ROOTDIR"/fonts/* "$DEST"/usr/share/fonts
# Allow to restore default espeakup settings during installation
cp -a /usr/sbin/speakup-restore "$DEST"/sbin/
rm -rf "DEST"/usr/lib/setup
chmod 755 "$DEST"/etc/rc.d/rc.espeakup
chmod 755 "$DEST"/sbin/inst
chmod 755 "$DEST"/etc/profile.d/alias.sh
chmod 755 "$DEST"/sbin/alsa-info.sh
chmod 755 "$DEST"/etc/rc.d/rc.alsa
# We have included alsa-info.sh in the initrd. To update it:
# wget --no-check-certificate -nv http://www.alsa-project.org/alsa-info.sh 2>/dev/null
chmod 644 "$DEST"/usr/share/alsa/soundcards.conf
chmod 644 "$DEST"/usr/share/alsa/utils.sh
(cd "$DEST"/usr/bin || exit
ln -sf ../../bin/bash bash
)
mkdir -p "$DEST"/usr/lib64/locale
. "$ROOTDIR"/misc/SeTlocales
while read -r Locale; do
	ll=$(echo "$Locale"|cut -c 1-2)
	# the script SeTlocales provides the functions SeTCode and SeTLocaleDir
	SeTLocaleDir
	# Include the files gettext needs in /usr/lib64/locale.
	mkdir -p "$DEST"/usr/share/locale/"$LocaleDir"/LC_MESSAGES
	cp -r  /usr/lib64/locale/"$Locale" \
		"$DEST"/usr/lib64/locale
	if [ -f  /usr/share/locale/"$LocaleDir"/LC_MESSAGES/gettext-runtime.mo ]; then
		cp /usr/share/locale/"$LocaleDir"/LC_MESSAGES/gettext-runtime.mo \
		"$DEST"/usr/share/locale/"$LocaleDir"/LC_MESSAGES
	elif [ -f /usr/share/locale/"$ll"/LC_MESSAGES/gettext-runtime.mo ]; then
		cp /usr/share/locale/"$ll"/LC_MESSAGES/gettext-runtime.mo \
		"$DEST"/usr/share/locale/"$LocaleDir"/LC_MESSAGES
	fi
	if [ -f /usr/share/locale/"$LocaleDir"/LC_MESSAGES/dialog.mo ]; then
		cp /usr/share/locale/"$LocaleDir"/LC_MESSAGES/dialog.mo \
		"$DEST"/usr/share/locale/"$LocaleDir"/LC_MESSAGES
	elif [ -f /usr/share/locale/"$ll"/LC_MESSAGES/dialog.mo ]; then
		cp /usr/share/locale/"$ll"/LC_MESSAGES/dialog.mo \
		"$DEST"/usr/share/locale/"$LocaleDir"/LC_MESSAGES
	fi
	if [ -f  /usr/share/locale/"$LocaleDir"/LC_MESSAGES/util-linux.mo ]; then
		cp /usr/share/locale/"$LocaleDir"/LC_MESSAGES/util-linux.mo \
		"$DEST"/usr/share/locale/"$LocaleDir"/LC_MESSAGES
	elif [ -f /usr/share/locale/"$ll"/LC_MESSAGES/util-linux.mo ]; then
		cp /usr/share/locale/"$ll"/LC_MESSAGES/util-linux.mo \
		"$DEST"/usr/share/locale/"$LocaleDir"/LC_MESSAGES
	fi
	if [ -f  /usr/share/locale/"$LocaleDir"/LC_MESSAGES/nano.mo ]; then
		cp /usr/share/locale/"$LocaleDir"/LC_MESSAGES/nano.mo \
		"$DEST"/usr/share/locale/"$LocaleDir"/LC_MESSAGES
	elif [ -f /usr/share/locale/"$ll"/LC_MESSAGES/nano.mo ]; then
		cp /usr/share/locale/"$ll"/LC_MESSAGES/nano.mo \
		"$DEST"/usr/share/locale/"$LocaleDir"/LC_MESSAGES
	fi
done < "$ROOTDIR"/misc/locales_list_sorted_by_name
# write and put in place the customized initrd
echo "write and put in place the customized initrd..."
cd "$DEST" || exit 1
find . | cpio -o -H newc | xz -9fv -C crc32 > "$ISODIR"/initrd
rm -f "$ROOTDIR"/initrd.img
